/*
 * Generated by dtrace(1M).
 */

#ifndef	_PROVIDER_H
#define	_PROVIDER_H

#include <unistd.h>

#ifdef	__cplusplus
extern "C" {
#endif

#define HYRISE_STABILITY "___dtrace_stability$hyrise$v1$1_1_0_1_1_0_1_1_0_1_1_0_1_1_0"

#define HYRISE_TYPEDEFS "___dtrace_typedefs$hyrise$v2"

#if !defined(DTRACE_PROBES_DISABLED) || !DTRACE_PROBES_DISABLED

#define	HYRISE_JOB_END(arg0, arg1) \
do { \
	__asm__ volatile(".reference " HYRISE_TYPEDEFS); \
	__dtrace_probe$hyrise$job_end$v1$6c6f6e67$75696e747074725f74(arg0, arg1); \
	__asm__ volatile(".reference " HYRISE_STABILITY); \
} while (0)
#define	HYRISE_JOB_END_ENABLED() \
	({ int _r = __dtrace_isenabled$hyrise$job_end$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	HYRISE_JOB_START(arg0, arg1, arg2) \
do { \
	__asm__ volatile(".reference " HYRISE_TYPEDEFS); \
	__dtrace_probe$hyrise$job_start$v1$6c6f6e67$63686172202a$75696e747074725f74(arg0, arg1, arg2); \
	__asm__ volatile(".reference " HYRISE_STABILITY); \
} while (0)
#define	HYRISE_JOB_START_ENABLED() \
	({ int _r = __dtrace_isenabled$hyrise$job_start$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	HYRISE_QUERY_END(arg0, arg1, arg2) \
do { \
	__asm__ volatile(".reference " HYRISE_TYPEDEFS); \
	__dtrace_probe$hyrise$query_end$v1$63686172202a$696e74$75696e747074725f74(arg0, arg1, arg2); \
	__asm__ volatile(".reference " HYRISE_STABILITY); \
} while (0)
#define	HYRISE_QUERY_END_ENABLED() \
	({ int _r = __dtrace_isenabled$hyrise$query_end$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	HYRISE_QUERY_START(arg0, arg1, arg2) \
do { \
	__asm__ volatile(".reference " HYRISE_TYPEDEFS); \
	__dtrace_probe$hyrise$query_start$v1$63686172202a$696e74$75696e747074725f74(arg0, arg1, arg2); \
	__asm__ volatile(".reference " HYRISE_STABILITY); \
} while (0)
#define	HYRISE_QUERY_START_ENABLED() \
	({ int _r = __dtrace_isenabled$hyrise$query_start$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	HYRISE_SCHEDULE_TASKS(arg0) \
do { \
	__asm__ volatile(".reference " HYRISE_TYPEDEFS); \
	__dtrace_probe$hyrise$schedule_tasks$v1$696e74(arg0); \
	__asm__ volatile(".reference " HYRISE_STABILITY); \
} while (0)
#define	HYRISE_SCHEDULE_TASKS_ENABLED() \
	({ int _r = __dtrace_isenabled$hyrise$schedule_tasks$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	HYRISE_SCHEDULE_TASKS_AND_WAIT(arg0) \
do { \
	__asm__ volatile(".reference " HYRISE_TYPEDEFS); \
	__dtrace_probe$hyrise$schedule_tasks_and_wait$v1$696e74(arg0); \
	__asm__ volatile(".reference " HYRISE_STABILITY); \
} while (0)
#define	HYRISE_SCHEDULE_TASKS_AND_WAIT_ENABLED() \
	({ int _r = __dtrace_isenabled$hyrise$schedule_tasks_and_wait$v1(); \
		__asm__ volatile(""); \
		_r; })


extern void __dtrace_probe$hyrise$job_end$v1$6c6f6e67$75696e747074725f74(long, uintptr_t);
extern int __dtrace_isenabled$hyrise$job_end$v1(void);
extern void __dtrace_probe$hyrise$job_start$v1$6c6f6e67$63686172202a$75696e747074725f74(long, const char *, uintptr_t);
extern int __dtrace_isenabled$hyrise$job_start$v1(void);
extern void __dtrace_probe$hyrise$query_end$v1$63686172202a$696e74$75696e747074725f74(const char *, int, uintptr_t);
extern int __dtrace_isenabled$hyrise$query_end$v1(void);
extern void __dtrace_probe$hyrise$query_start$v1$63686172202a$696e74$75696e747074725f74(const char *, int, uintptr_t);
extern int __dtrace_isenabled$hyrise$query_start$v1(void);
extern void __dtrace_probe$hyrise$schedule_tasks$v1$696e74(int);
extern int __dtrace_isenabled$hyrise$schedule_tasks$v1(void);
extern void __dtrace_probe$hyrise$schedule_tasks_and_wait$v1$696e74(int);
extern int __dtrace_isenabled$hyrise$schedule_tasks_and_wait$v1(void);

#else

#define	HYRISE_JOB_END(arg0, arg1) \
do { \
	} while (0)
#define	HYRISE_JOB_END_ENABLED() (0)
#define	HYRISE_JOB_START(arg0, arg1, arg2) \
do { \
	} while (0)
#define	HYRISE_JOB_START_ENABLED() (0)
#define	HYRISE_QUERY_END(arg0, arg1, arg2) \
do { \
	} while (0)
#define	HYRISE_QUERY_END_ENABLED() (0)
#define	HYRISE_QUERY_START(arg0, arg1, arg2) \
do { \
	} while (0)
#define	HYRISE_QUERY_START_ENABLED() (0)
#define	HYRISE_SCHEDULE_TASKS(arg0) \
do { \
	} while (0)
#define	HYRISE_SCHEDULE_TASKS_ENABLED() (0)
#define	HYRISE_SCHEDULE_TASKS_AND_WAIT(arg0) \
do { \
	} while (0)
#define	HYRISE_SCHEDULE_TASKS_AND_WAIT_ENABLED() (0)

#endif /* !defined(DTRACE_PROBES_DISABLED) || !DTRACE_PROBES_DISABLED */


#ifdef	__cplusplus
}
#endif

#endif	/* _PROVIDER_H */
